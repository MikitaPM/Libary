# Создаем словарь для хранения информации о книгах в библиотеке
books = {}

# Создаем словарь для хранения информации о читателях
readers = {}


# Функция для генерации уникального кода книги
def generate_book_code():
    return str(len(books) + 1)


# Пользователь входит в систему, вводя свою фамилию
def login():
    surname = input("Введите свою фамилию: ")

    # Если читатель уже зарегистрирован, выводим сообщение об успешном входе
    if surname in readers:
        print("Добро пожаловать, ", surname)
    else:
        # Если читатель новый, запрашиваем информацию об нем и добавляем в словарь читателей
        name = input("Введите ваше имя: ")
        patronymic = input("Введите ваше отчество: ")
        readers[surname] = {"name": name, "patronymic": patronymic, "books": []}
        print("Вы успешно зарегистрированы в системе, ", surname)


# Функция для добавления новой книги в библиотеку
def add_book():
    author = input("Введите фамилию и имя автора книги: ")
    title = input("Введите название книги: ")
    code = generate_book_code() # генерируем уникальный код книги

    # Добавляем новую книгу в словарь "books"
    books[code] = {"author": author, "title": title, "available": True}

    print("Книга успешно добавлена в библиотеку")


# Функция для печати списка книг в библиотеке
def print_books():
    for code, book in books.items():
        print(f"{code} - {book['author']}, {book['title']}, {'в наличии' if book['available'] else 'нет в наличии'}")


# Функция для выдачи книги читателю
def checkout_book():
    # Запрашиваем у читателя его фамилию и код книги, которую он хочет взять
    surname = input("Введите вашу фамилию: ")
    code = input("Введите код книги, которую вы хотите взять: ")

    # Проверяем, есть ли такая книга в библиотеке
    if code not in books.keys():
        print("Книга не найдена в библиотеке")
        return

    book = books[code]

    # Проверяем, доступна ли книга для выдачи текущему читателю
    if not book['available']:
        print("Книга выдана другому читателю")
        return

    # Выдаем книгу текущему читателю
    book['available'] = False
    readers[surname]['books'].append(code)

    print("Книга успешно выдана на чтение")


# Функция для возврата книги в библиотеку
def return_book():
    # Запрашиваем у читателя его фамилию и код книги, которую он хочет вернуть
    surname = input("Введите вашу фамилию: ")
    code = input("Введите код книги, которую вы хотите вернуть: ")

    # Проверяем, есть ли такая книга в списке взятых книг у текущего читателя
    if code not in readers[surname]["books"]:
        print("Вы не брали эту книгу на чтение")
        return

    book = books[code]

    # Возвращаем книгу в библиотеку
    book['available'] = True
    readers[surname]["books"].remove(code)

    print("Книга успешно возвращена в библиотеку")


# Основной цикл программы
while True:
    # Запрашиваем у пользователя дальнейшее действие: залогиниться, добавить книгу, посмотреть список книг,
    # взять книгу на чтение, вернуть книгу, закончить работу
    action = input("Добро пожаловать в библиотеку! Что вы хотите сделать?\n"
                   "1 - войти (зарегистрироваться) в систему\n"
                   "2 - добавить книгу\n"
                   "3 - посмотреть список книг\n"
                   "4 - взять книгу на чтение\n"
                   "5 - вернуть книгу\n"
                   "6 - закончить работу\n")

    # Действие 1 - залогиниться
    if action == "1":
        login()

    # Действие 2 - добавить книгу
    elif action == "2":
        add_book()

    # Действие 3 - посмотреть список книг
    elif action == "3":
        print_books()

    # Действие 4 - взять книгу на чтение
    elif action == "4":
        checkout_book()

    # Действие 5 - вернуть книгу
    elif action == "5":
        return_book()

    # Действие 6 - закончить работу
    elif action == "6":
        break

    # Если была выбрана неправильная опция, выводим сообщение об ошибке
    else:
        print("Неправильный выбор действия. Попробуйте еще раз.")